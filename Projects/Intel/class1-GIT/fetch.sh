# ==============================================================
# FULL EXAMPLE: git fetch + rebase vs merge demonstration
# ==============================================================

# üß± 1Ô∏è‚É£ SETUP: Create a local repo and simulate a remote
rm -rf fetch-demo && mkdir fetch-demo && cd fetch-demo
git init
echo "base" > app.txt
git add app.txt
git commit -m "base commit"

# Simulate a remote (fake origin)
git remote add origin https://example.com/eduard/fetch-demo.git

# (We‚Äôll mimic teammate commits locally instead of a real server)
# So let's make a second "bare remote" repository for realism:
cd ..
git clone --bare fetch-demo fetch-remote.git
cd fetch-demo
git remote set-url origin ../fetch-remote.git
git push -u origin main

# ==============================================================
# üß© 2Ô∏è‚É£ PROBLEM: Teammate updates origin/main while you are behind
# ==============================================================

# Simulate teammate adding new commits to the remote
cd ../fetch-remote.git
git clone . ../teammate
cd ../teammate
git checkout main
echo "teammate line 1" >> app.txt
git add . && git commit -m "teammate: update line 1"
git push origin main
cd ../fetch-demo   # back to your local repo

# Your local main is now outdated
echo "my local change" >> local.txt
git add local.txt && git commit -m "local: work before fetch"

echo
echo "===================== BEFORE FETCH ====================="
git log --oneline --decorate --graph --all
echo "========================================================"

# ==============================================================
# ‚öôÔ∏è 3Ô∏è‚É£ SOLUTION: Use git fetch to sync remote refs
# ==============================================================

git fetch origin

# Check what changed remotely
echo
echo "------- Changes available on remote (not merged yet) -------"
git log main..origin/main --oneline
echo "-----------------------------------------------------------"

# ==============================================================
# üß≠ 4Ô∏è‚É£ OPTION A: Rebase your local work on top of the new remote
# ==============================================================

echo
echo "------- Rebase local work onto latest origin/main -------"
git rebase origin/main

# If there‚Äôs no conflict, Git replays your local commit after teammate‚Äôs.
# If conflicts occur, fix them, `git add <file>`, then `git rebase --continue`.

echo
echo "===================== AFTER REBASE ======================"
git log --oneline --decorate --graph --all
echo "========================================================"

# ==============================================================
# üß≠ 5Ô∏è‚É£ OPTION B (alternative): merge instead of rebase
# ==============================================================

# Reset to simulate again
git reset --hard HEAD~1
git fetch origin
git merge origin/main -m "merge: sync with remote main"

echo
echo "===================== AFTER MERGE ======================="
git log --oneline --decorate --graph --all
echo "========================================================"

# ==============================================================
# üßæ 6Ô∏è‚É£ NOTES
# ==============================================================

# üü¢ git fetch ‚Üí only updates origin refs (safe)
# üü† git rebase origin/main ‚Üí replays local commits on top of remote (linear)
# üîµ git merge origin/main ‚Üí combines both histories with a merge commit
# üß® Never edit or force-push main if it‚Äôs shared with others.
