pipeline {
    agent any
    environment {
        ANSIBLE_CONFIG = '/etc/ansible/ansible.cfg'
    }
    stages {
        stage('Checkout') {
            steps {
                // Checkout the repository
                git(url: 'https://github.com/EduardUsatchev/DevOps.git', branch: 'main')
            }
        }

        stage('Build') {
            steps {
                // Build the Docker image
                sh '''
                cd /var/jenkins_home/workspace/cicd/jenkins/ci-cd/app/
                pwd
                docker build -t app .'''
            }
        }

        stage('Run') {
            steps {
                script {
                    // Define the container name
                     def containerName = "app"

                    // Check if the container is running
                        def isRunning = sh(script: "docker ps -f name=${containerName} -a", returnStdout: true).trim()

                        if (isRunning) {
                    // Stop the running container
                            sh "docker stop ${containerName}"
                            sh "docker rm ${containerName}"
                            }
                    // Run the Docker container
                    sh 'docker run -d -p 5000:5000  --name app app'

                    // Ensure services are up
                }
                script {
                    sleep 15 // Adjust the sleep time as necessary
                }
            }
        }
        stage('Test')
        {
            steps
            {
                script
                 {
                    try
                    {
                        sh '''
                        cd /var/jenkins_home/workspace/cicd/jenkins/ci-cd/app/
                        pwd
                        docker exec app python test_app.py
                         '''
                    }
                    catch (Exception e)
                    {
                        currentBuild.result = 'FAILURE'
                        throw e
                        // Define the container name
                         def containerName = "app"

                        // Check if the container is running
                            def isRunning = sh(script: "docker ps --filter 'name=${containerName}' --filter 'status=running' -q", returnStdout: true).trim()

                            if (isRunning)
                            {
                                // Stop the running container
                                sh "docker stop ${containerName}"
                                sh "docker rm ${containerName}"
                            }
                    }
                }
            }
            }

         stage('Finalize')
         {
            when
            {
                expression
                {
                    currentBuild.result == null || currentBuild.result == 'SUCCESS'
                }
            }
            steps
            {
                withCredentials([usernamePassword(credentialsId: 'DockerHub', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_ID')])
                {
                    sh '''
                    docker tag app:latest a18ab77c4b90/app:latest
                    docker push a18ab77c4b90/app:latest'''
                }
            }
        }


//         stage('Deploy to Minikube')
//         {
//             steps
//             {
//                 withCredentials([sshUserPrivateKey(credentialsId: 'ansible_ssh_key', keyFileVariable: 'SSH_KEY_PATH')])
//                 {
//                     // Read the template
//                     def inventoryTemplate = readFile 'jenkins/ci-cd/hosts.template'
//
//                     // Replace placeholder with actual SSH key path
//                     def inventoryContent = inventoryTemplate.replace('${SSH_KEY_PATH}', SSH_KEY_PATH)
//
//                     // Write the final inventory file
//                     writeFile file: 'jenkins/ci-cd/hosts', text: inventoryContent
//
//                     // Execute the Ansible playbook
//                     ansiblePlaybook(
//                         playbook: 'jenkins/ci-cd/deploy.yaml',
//                         inventory: 'jenkins/ci-cd/hosts')
//                 }
//             }
   }
}
